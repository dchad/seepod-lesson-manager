/*  Copyright 2009 Derek Chadwick
 
    This file is part of the SeePod Lesson Manager.

    SeePod Lesson Manager is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SeePod Lesson Manager is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SeePod Lesson Manager.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * Project: SeePod Lesson Manager
 * Author : Derek Chadwick
 * Date   : 1/2/2009
 * Class  : WLCPTagUpdater
 * 
 * Description: Called by WLCPThread to do a recursive mp3 tag update on the expansion and vocab files generated by WLCP.
 * 
 * 
 */



package seepodlessonmanager;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class WLCPTagUpdater implements Runnable
{
  private GenericController controller;
  private Config seePodConfig;
   
  private Boolean ignoreSentenceFiles;
  private Boolean deleteSentenceFiles;
  private Boolean archiveSentenceFiles;
  private Boolean recursiveUpdate;
  
  public WLCPTagUpdater(GenericController wlcpc, Config spc)
  {
     if (spc != null)
     {
        seePodConfig = spc;
     }
     else
     {
        if (Config.DEBUG)
           Debug.debug("WLCPTagUpdater() - Config is null."); 
        return;
     }
     if (wlcpc != null)
     {
        controller = wlcpc;
     }
     else
     {
        if (Config.DEBUG)
           Debug.debug("WLCPTagUpdater() - WLCPController is null."); 
        return;
     }     
     ignoreSentenceFiles = seePodConfig.getIgnoreSentenceFiles();
     deleteSentenceFiles = seePodConfig.getDeleteSentenceFiles();
     archiveSentenceFiles = seePodConfig.getArchiveSentenceFiles();
     recursiveUpdate = seePodConfig.getIncludeSubdirectories();
     
  }
  
  void startScan()
  {
      // here we go!!!
      if (Config.DEBUG)
      {
         Debug.debug("WLCPTagUpdater.startScan(): started directory scan...");
      }
      
      String startDir = seePodConfig.getLessonDirectory();
      if (startDir != null)
      {
         File topDir = new File(startDir);
         if (topDir.exists())
         {
            if (topDir.isDirectory())
            {
               scanDirectory(topDir);
            }
         }
      }
      if (Config.DEBUG)
         Debug.debug("LessonScanner.startScan() - Finished scan.");
      controller.printStatusMessage("Finished auto tagging.");
  }
  
  private void scanDirectory(File startDir)
  {
     Boolean foundLesson = false;
     
     File[] files = startDir.listFiles(new DirectoryAndMP3FileFilter());
     
      if (files.length > 0)
      {
         if (!ignoreSentenceFiles)
         {
            if (deleteSentenceFiles)
            {
               removeSentenceFiles(startDir);
            }
            else
            {
               zipSentenceFiles(startDir);
            }
         }
         for (int i = 0; i < files.length; i++)
         {

           //Debug.debug("MP3TagUpdater.scanDirectory() - Scanning file: " + files[i]);
           File f = files[i];
           
           if (f.exists())
           {
              if (f.isDirectory())
              {
                 if (recursiveUpdate)
                 {
                    scanDirectory(f);
                 }
              }
              else
              {
                 String tmp = f.getAbsolutePath();
                 
                 if (tmp.endsWith("lesson.mp3"))
                 {
                    //check for a lesson, review or dialogue mp3 file,read the tags, then write to expansion and vocab files
                    foundLesson = true;
                    
                    ID3TagSet tags = new ID3TagSet(f);
                    
                    String exp = tmp.replace("lesson.mp3", "expansion_sentences.mp3");
                    
                    File tmpFile = new File(exp);
                    if (tmpFile.exists())
                    {
                       //tags.setAlbumName("WLCP-Expansion");
                       writeMP3Tags(tmpFile, tags);
                    }
                    String dia = tmp.replace("lesson.mp3", "dialogue_sentences.mp3");
                    
                    tmpFile = new File(dia);
                    if (tmpFile.exists())
                    {
                       //tags.setAlbumName("WLCP-Dialogue");
                       writeMP3Tags(tmpFile, tags);
                    }
                    String voc = tmp.replace("lesson.mp3", "vocabulary_sentences.mp3");
                    
                    tmpFile = new File(voc);
                    if (tmpFile.exists())
                    {
                       //tags.setAlbumName("WLCP-Vocabulary");
                       writeMP3Tags(tmpFile, tags);
                    }
                    
                    //controller.printStatusMessage("Found lesson: " + tmp);
                 }   
              }
           }
        } //for loop
        if (!foundLesson)
        {
           setDefaultTags(startDir);
        }
     }

  }
  
  private void setDefaultTags(File sDir)
  {
     
      File[] files = sDir.listFiles(new WLCPGeneratedFileFilter());
      
      if (files.length > 0)
      {
         for (int i = 0; i < files.length; i++)
         {
            File f = files[i];
            String tmp = f.getAbsolutePath();
                 
            if (tmp.endsWith(Config.WLCP_EXPANSION_SUFFIX))
            {
               ID3TagSet tags = new ID3TagSet(f);
               if (!tags.hasID3v2Tags())
               {
                  String fileName = f.getName();
                  String lessonTitle = fileName.substring(0,fileName.indexOf("_expansion"));
                  tags.setAlbumName(Config.CPOD_SHOW_STR);
                  tags.setArtist(Config.CPOD_CHINESEPOD_STR);
                  tags.setComment(Config.CPOD_URL);
                  tags.setSongTitle(lessonTitle);
                  tags.setTrackNumber("0001");
                  tags.setYear("2009");
                  tags.writeID3Tags();
               }
            }
            else if (tmp.endsWith(Config.WLCP_DIALOG_SUFFIX))
            {
               ID3TagSet tags = new ID3TagSet(f);
               if (!tags.hasID3v2Tags())
               {
                  String fileName = f.getName();
                  String lessonTitle = fileName.substring(0,fileName.indexOf("_dialogue"));
                  tags.setAlbumName(Config.CPOD_DIALOGUE_STR);
                  tags.setArtist(Config.CPOD_CHINESEPOD_STR);
                  tags.setComment(Config.CPOD_URL);
                  tags.setSongTitle(lessonTitle);
                  tags.setTrackNumber("0001");
                  tags.setYear("2009");
                  tags.writeID3Tags();
               }
            }
            else if (tmp.endsWith(Config.WLCP_VOCAB_SUFFIX))
            {
               ID3TagSet tags = new ID3TagSet(f);
               if (!tags.hasID3v2Tags())
               {
                  String fileName = f.getName();
                  String lessonTitle = fileName.substring(0,fileName.indexOf("_vocabulary"));
                  tags.setAlbumName(Config.CPOD_SHOW_STR);
                  tags.setArtist(Config.CPOD_CHINESEPOD_STR);
                  tags.setComment(Config.CPOD_URL);
                  tags.setSongTitle(lessonTitle);
                  tags.setTrackNumber("0001");
                  tags.setYear("2009");
                  tags.writeID3Tags();
               }
            }
            else
            {
               ID3TagSet tags = new ID3TagSet(f);
               if (!tags.hasID3v2Tags())
               {
                  String fileName = f.getName();
                  String lessonTitle = fileName.substring(0,fileName.indexOf(".mp3"));
                  tags.setAlbumName(Config.CPOD_SHOW_STR);
                  tags.setArtist(Config.CPOD_CHINESEPOD_STR);
                  tags.setComment(Config.CPOD_URL);
                  tags.setSongTitle(lessonTitle);
                  tags.setTrackNumber("0001");
                  tags.setYear("2009");
                  tags.writeID3Tags();
               }
            }
         }
      }
  }
  
  public void run()
  {
     startScan();
  }
  
  private void writeMP3Tags(File of, ID3TagSet tags)
  {
      
      ID3TagSet tagger = new ID3TagSet(of);
      if (tagger.hasID3v2Tags())
      {
         controller.printStatusMessage("Already has ID3v2 tags: " + of.getName());
         return;
      }
      
      if (tags.hasID3v2Tags() && tagger.isValidMP3File())
      { 
         tagger.copyID3Tags(tags.getID3Tags());
         tagger.writeID3Tags();
         controller.printStatusMessage("Added tags to file: " + of.getName());
      }
      else
      {
         controller.printStatusMessage("Could not update tags for file:" + of.getName());
      }
      
      
      return;   
  }   
   
  private void removeSentenceFiles(File dir)
  {
     SentenceFileFilter ff = new SentenceFileFilter();
     File[] fileList = dir.listFiles(ff);
     for (int i = 0; i < fileList.length; i++)
     {
        fileList[i].delete();
        controller.printStatusMessage("Deleted sentence file: " + fileList[i].getName());
     }
  }
  
  private void zipSentenceFiles(File dir)
  {
     SentenceFileFilter ff = new SentenceFileFilter();
     File[] fileList = dir.listFiles(ff);
     ZipOutputStream out = null;
     String zipFile = dir.getAbsolutePath() + File.separator + "sentencefiles.zip";
     
     if (fileList.length > 0)
     {
        try 
        {
            out = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(zipFile)));
        } catch (FileNotFoundException ex) {
            Debug.debug("WLCPTagUpdate.zipSentenceFiles - IO exception while opening zip file: ");
        }
                
        for (int i = 0; i < fileList.length; i++)
        {
           try
           {
              int filesize = (int) fileList[i].length();
              byte[] data = new byte[filesize];               
              BufferedInputStream in = new BufferedInputStream(new FileInputStream(fileList[i]));
              int count;
              out.putNextEntry(new ZipEntry(fileList[i].getName()));
              while((count = in.read(data,0,filesize)) != -1)
              {      
                 out.write(data, 0, count);
              }
              in.close();
              fileList[i].delete();
              controller.printStatusMessage("Archived sentence file: " + fileList[i].getName());
           }
           catch(Exception e)
           {
              Debug.debug("WLCPTagUpdate.zipSentenceFiles = IO exception while writing file: ", fileList[i].getName());
           }        
        }
        try 
        {
            out.flush();
            out.close();
        } catch (IOException ex) {
            Debug.debug("WLCPTagUpdate.zipSentenceFiles = IO exception while closing zip file: ");
        }
     }
  }
  
  private class SentenceFileFilter implements java.io.FileFilter 
  {
     public boolean accept(File f)
     {
        String filename = f.getName().toLowerCase();
        return (filename.startsWith("rec-") && filename.endsWith(".mp3"));

     }
  }
  
   private class LessonFileFilter implements java.io.FileFilter 
  {
     public boolean accept(File f)
     {
        String filename = f.getName().toLowerCase();
        return (filename.startsWith("chinesepod_") && (filename.endsWith("pb.mp3") || filename.endsWith("pr.mp3")));

     }
  }
  
  private class WLCPFileFilter implements java.io.FileFilter 
  {
     public boolean accept(File f)
     {
        String filename = f.getName().toLowerCase();
        return (filename.endsWith("lesson.mp3") || filename.endsWith("review.mp3") || filename.endsWith("dialogue.mp3"));

     }
  }
  
  private class WLCPGeneratedFileFilter implements java.io.FileFilter
  {
     public boolean accept(File f)
     {
        String filename = f.getName().toLowerCase();
        return (filename.endsWith("sentences.mp3"));

     }
  }

  private class MP3FileFilter implements java.io.FileFilter
  {
     public boolean accept(File f)
     {
        String filename = f.getName().toLowerCase();
        return (filename.endsWith(".mp3"));

     }
  }

  private class DirectoryAndMP3FileFilter implements java.io.FileFilter
  {
     public boolean accept(File f)
     {
        String filename = f.getName().toLowerCase();
        return (f.isDirectory() || filename.endsWith(".mp3"));

     }
  }
}