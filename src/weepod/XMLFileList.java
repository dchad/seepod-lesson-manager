/*  Copyright 2009 Derek Chadwick
 
    This file is part of the WeePod WLCP GUI.

    WeePod WLCP GUI is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    WeePod WLCP GUI is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with WeePod WLCP GUI.  If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * Project: WeePod WLCP GUI
 * Author : Derek Chadwick
 * Date   : 1/2/2009
 * Class  : XMLFileList
 * 
 * Description: Displays a list of XML files generated by WLCP.
 * 
 * 
 */

package weepod;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;

public class XMLFileList extends JPanel
{
    private DefaultListModel fileListModel;
    private JList xmlList;
    private int index;
    private Config weePodConfig;
    private XMLViewer xViewer;
    private String curDirectory;
    private JTextField wlcpDirectory;
    private String wlcpPath;
    private JButton wlcpDirButton;
    private JFileChooser fc;
    private Font xmlFont;
    
    public XMLFileList(XMLViewer xv, Config wpc)
    {
        super(false);
        
        if (wpc != null)
        {
            weePodConfig = wpc;
        }
        else
        {
            Debug.debug("XMLFileList() - Config is null.");
            return;
        }
        if (xv != null)
        {
            xViewer = xv;
        }
        else
        {
            Debug.debug("XMLFileList() - XMLViewer is null.");
            return;
        }
        
        xmlFont = new Font("Dialog", Font.BOLD, 16);
      
        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
        setPreferredSize(new Dimension(300,800));
        setMaximumSize(new Dimension(300,1000));
        setBorder(BorderFactory.createTitledBorder("XML File List"));
        
        JPanel dirChooserPanel = new JPanel(false);
        dirChooserPanel.setLayout(new BoxLayout(dirChooserPanel, BoxLayout.X_AXIS));
        dirChooserPanel.setMaximumSize(new Dimension(300,50));
      
        wlcpDirectory = new JTextField(30);
        wlcpDirectory.setMinimumSize(new Dimension(150,25));
        wlcpDirectory.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt)
        {
           wlcpPath = wlcpDirectory.getText();
           weePodConfig.setLessonDirectory(wlcpPath);
           listDirectory();
        }
        });
        dirChooserPanel.add(wlcpDirectory);
        dirChooserPanel.add(Box.createHorizontalGlue());
        dirChooserPanel.add(Box.createRigidArea(new Dimension(5,0)));
      
        wlcpDirButton = new JButton();
        wlcpDirButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/weepod/images/folder_yellow.png"))); // NOI18N
        wlcpDirButton.setToolTipText("Select Lesson Directory");
      
        wlcpDirButton.addActionListener(new java.awt.event.ActionListener() 
        {
         public void actionPerformed(java.awt.event.ActionEvent evt) 
         {
            
            try 
            {
               wlcpDirChooserButtonActionPerformed(evt);
            } catch (IOException ex) {
               Debug.debug("XMLFileList() - Directory chooser action exception.");
            }
         }
        });
      
        dirChooserPanel.add(wlcpDirButton);
        add(dirChooserPanel);
        add(Box.createRigidArea(new Dimension(0,5)));
        
        
        fileListModel = new DefaultListModel();
          
        RSSListRenderer listRend = new RSSListRenderer();
        xmlList = new JList(fileListModel); 
        xmlList.setCellRenderer(listRend);
        
        //createPopupMenu();
      
        MouseListener mouseListener = new MouseAdapter() //add lesson to the download list
        {
         @Override
         public void mouseClicked(MouseEvent e) 
         {
            if (e.getClickCount() == 1)
            {
               if (fileListModel.size() > 0)
               {
                  Cursor hourglassCursor = new Cursor(Cursor.WAIT_CURSOR);
                  setCursor(hourglassCursor);
                  index = xmlList.locationToIndex(e.getPoint());
                  String xfile = (String) fileListModel.get(index);
                  File xml = new File(curDirectory + File.separator + xfile);
                  xViewer.displayPage(xml);
                  try
                  {
                            Thread.sleep(1000);
                  } catch (InterruptedException ex) {
                            Logger.getLogger(XMLFileList.class.getName()).log(Level.SEVERE, null, ex);
                  }
                  Cursor normalCursor = new Cursor(Cursor.DEFAULT_CURSOR);
                  setCursor(normalCursor);
               }
            }
            if (e.getClickCount() == 2) 
            {
               if (fileListModel.size() > 0)
               {
                  index = xmlList.locationToIndex(e.getPoint());
               }
            }
          }
         
        @Override
        public void mousePressed(MouseEvent e) 
        {
            if (e.isPopupTrigger())
            {
               if (fileListModel.size() > 0)
               {
                   index = xmlList.locationToIndex(e.getPoint());
                  
                   //popup.show(e.getComponent(), e.getX(), e.getY());
               }
            }
        }
      
        @Override
        public void mouseReleased(MouseEvent e) 
        {
            if (e.isPopupTrigger())
            {
               if (fileListModel.size() > 0)
               {
                  index = xmlList.locationToIndex(e.getPoint());
                  
                  //popup.show(e.getComponent(), e.getX(), e.getY());
               }
            }
        }
      
      };
      xmlList.addMouseListener(mouseListener);

      // Lastly, put the JList into a JScrollPane.
      JScrollPane scrollpane = new JScrollPane();
      scrollpane.getViewport().add(xmlList);

      add(BorderLayout.CENTER, scrollpane);

      wlcpPath = weePodConfig.getLessonDirectory();
      wlcpDirectory.setText(wlcpPath);
      listDirectory();
    }
    
    public void listDirectory() 
    {
        // Convert the string to a File object, and check that the dir exists
        clearList();
        
        String[] files;
        FilenameFilter filter = new FilenameFilter() 
        {
            public boolean accept(File dir, String name) 
            {
                if (name.endsWith(".xml") || name.endsWith(".html"))
                    return true;
                else
                    return false;
            }
        };

        curDirectory = weePodConfig.getLessonDirectory();
        File dir = new File(curDirectory);
        if (!dir.isDirectory())
        {
           Debug.debug("FileList.listDirectory() - not a directory: ", dir.getAbsoluteFile());
           return;
        }

        // Get the (filtered) directory entries
        files = dir.list(filter);

        int size = files.length;
        for (int i = 0; i < size; i++)
        {
           fileListModel.add(i, files[i]);
           //Debug.debug("XMLFileList.listDirectory() - files: ", files[i]);
        }

    }

    public void clearList() 
    {
         fileListModel.removeAllElements();
         if (Config.DEBUG)
            Debug.debug("FileList.clearList() - Cleared file list.");
    }
       
    private void wlcpDirChooserButtonActionPerformed(java.awt.event.ActionEvent evt) throws IOException
    {
      
        if (fc == null) 
        {
            fc = new JFileChooser();
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);   
        }

        //Show it.
        int returnVal = fc.showOpenDialog(this);
        
        //Process the results.
        if (returnVal == JFileChooser.APPROVE_OPTION) 
        {
            File selectedFolder = fc.getSelectedFile();
            wlcpPath = selectedFolder.getPath();
            wlcpDirectory.setText(wlcpPath); 
            weePodConfig.setLessonDirectory(wlcpPath);
            listDirectory();
        } 
        else 
        {
           if (Config.DEBUG)
              Debug.debug("XMLFileList.wlcpDirChooserButtonActionPerformed(): cancelled file selection.");
        }
        
    }

public class RSSListRenderer extends DefaultListCellRenderer
{

   public RSSListRenderer()
   {
       super();
   }

    @Override
    public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
    {
        // Get the renderer component from parent class
        JLabel label = (JLabel) super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
        label.setFont(xmlFont);

        return label;
    }
}

}
